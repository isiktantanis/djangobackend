# Generated by Django 4.0.4 on 2022-05-02 15:04

import Web.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='NFT',
            fields=[
                ('uid', models.TextField(primary_key=True, serialize=False, verbose_name='Unique id of the NFT.')),
                ('nID', models.IntegerField(verbose_name='ID of a certain NFT.')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('description', models.TextField(null=True, verbose_name='Description')),
                ('metaDataType', models.CharField(max_length=5, verbose_name='metadata type')),
                ('dataLink', models.URLField(verbose_name='data link')),
                ('marketStatus', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)], verbose_name='market status')),
                ('file', models.FileField(upload_to='nfts/')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='NFTCollection',
            fields=[
                ('name', models.CharField(max_length=128, primary_key=True, serialize=False, verbose_name='Name of the NFT collection.')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description of the NFT given by the creator.')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('uAdress', models.TextField(primary_key=True, serialize=False, verbose_name='Address')),
                ('username', models.CharField(max_length=32, unique=True, verbose_name='Username')),
                ('profilePicture', models.ImageField(blank=True, null=True, storage=Web.models.OverwriteStorage(), upload_to='profilePictures/', verbose_name='Profile Picture')),
                ('mailAdress', models.TextField(unique=True, verbose_name='Email')),
                ('password', models.CharField(default='0', max_length=100, verbose_name='Password')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('favoritedNFTs', models.ManyToManyField(blank=True, to='Web.nft')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='Web.user')),
                ('watchListedNFTCollections', models.ManyToManyField(blank=True, to='Web.nftcollection')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NFTCollectionCategory',
            fields=[
                ('name', models.CharField(max_length=16, primary_key=True, serialize=False, verbose_name='Name')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='Web.nftcollectioncategory')),
            ],
            options={
                'verbose_name_plural': 'NFT Collection Categories',
            },
        ),
        migrations.AddField(
            model_name='nftcollection',
            name='category',
            field=models.ForeignKey(null=True, on_delete=models.SET('user_deleted'), related_name='category', to='Web.nftcollectioncategory', verbose_name='Category of the NFT Collection.'),
        ),
        migrations.AddField(
            model_name='nftcollection',
            name='owner',
            field=models.ForeignKey(default='', on_delete=models.SET('user_deleted'), related_name='owner', to='Web.user', to_field='username', verbose_name='Name of the creator of the NFT Collection.'),
        ),
        migrations.AddField(
            model_name='nftcollection',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='Web.nftcollection'),
        ),
        migrations.AddField(
            model_name='nft',
            name='collectionName',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collectionName', to='Web.nftcollection', verbose_name='Name of the collection where the NFT belongs.'),
        ),
        migrations.AddField(
            model_name='nft',
            name='creatorName',
            field=models.ForeignKey(on_delete=models.SET('user_deleted'), related_name='creatorName', to='Web.user', to_field='username', verbose_name='Name of the creator of the NFT.'),
        ),
        migrations.AddField(
            model_name='nft',
            name='currentOwner',
            field=models.ForeignKey(on_delete=models.SET('user_deleted'), to='Web.user', to_field='username', verbose_name='Name of the owner of the NFT.'),
        ),
        migrations.AddField(
            model_name='nft',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='Web.nft'),
        ),
        migrations.AlterUniqueTogether(
            name='nft',
            unique_together={('uid', 'nID')},
        ),
    ]
