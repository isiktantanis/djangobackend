# Generated by Django 4.0.4 on 2022-05-06 13:37

import Web.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='NFT',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('UID', models.TextField(verbose_name='Unique ID')),
                ('index', models.IntegerField(verbose_name='index')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('metaDataType', models.CharField(choices=[('video', 'video'), ('audio', 'audio'), ('image', 'image')], max_length=5, verbose_name='Metadata Type')),
                ('dataLink', models.URLField(verbose_name='Data Link')),
                ('marketStatus', models.IntegerField(choices=[(0, 'Not On Market'), (1, 'Not On Sale'), (2, 'On Sale')], default=0, verbose_name='Market Status')),
                ('nftFile', models.FileField(blank=True, null=True, storage=Web.models.OverwriteStorage(), upload_to='nfts/', verbose_name='File')),
                ('numLikes', models.IntegerField(default=0, verbose_name='Number of Likes')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('uAddress', models.TextField(primary_key=True, serialize=False, verbose_name='Address')),
                ('username', models.CharField(max_length=32, unique=True, verbose_name='Username')),
                ('profilePicture', models.ImageField(blank=True, null=True, storage=Web.models.OverwriteStorage(), upload_to=Web.models.FileUploadLocation(fields=['username'], parentFolder='profilePictures/'), verbose_name='Profile Picture')),
                ('email', models.EmailField(max_length=128, unique=True, verbose_name='Email')),
                ('is_active', models.BooleanField(default=False, verbose_name='Active')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Superuser')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Staff')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Join Date')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransHist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Price')),
                ('time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Time of Transaction')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('newOwner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='newUser', to=settings.AUTH_USER_MODEL, verbose_name='New User')),
                ('nft', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nft', to='Web.nft', verbose_name='NFT')),
                ('oldOwner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='oldUser', to=settings.AUTH_USER_MODEL, verbose_name='Old User')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='Web.transhist')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NFTCollectionCategory',
            fields=[
                ('name', models.CharField(max_length=16, primary_key=True, serialize=False, verbose_name='Name')),
                ('backgroundPicture', models.ImageField(storage=Web.models.OverwriteStorage(), upload_to='', verbose_name='Background Picture')),
                ('foregroundPicture', models.ImageField(storage=Web.models.OverwriteStorage(), upload_to='', verbose_name='Foreground Picture')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='Web.nftcollectioncategory')),
            ],
            options={
                'verbose_name_plural': 'NFT Collection Categories',
            },
        ),
        migrations.CreateModel(
            name='NFTCollection',
            fields=[
                ('name', models.CharField(max_length=128, primary_key=True, serialize=False, verbose_name='Name')),
                ('collectionImage', models.ImageField(blank=True, null=True, storage=Web.models.OverwriteStorage(), upload_to=Web.models.FileUploadLocation(fields=['name'], parentFolder='NFTCollections/'), verbose_name='Collection Image')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('numLikes', models.IntegerField(default=0, verbose_name='Number of Likes')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('category', models.ForeignKey(null=True, on_delete=models.SET('USER_DELETED'), related_name='category', to='Web.nftcollectioncategory', verbose_name='Category of the NFT Collection.')),
                ('owner', models.ForeignKey(on_delete=models.SET('USER_DELETED'), related_name='owner', to=settings.AUTH_USER_MODEL, to_field='username', verbose_name='Name')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='Web.nftcollection')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='nft',
            name='collectionName',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='Web.nftcollection', verbose_name='Collection Name'),
        ),
        migrations.AddField(
            model_name='nft',
            name='creator',
            field=models.ForeignKey(on_delete=models.SET('USER_DELETED'), related_name='creator', to=settings.AUTH_USER_MODEL, verbose_name='Creator'),
        ),
        migrations.AddField(
            model_name='nft',
            name='currentOwner',
            field=models.ForeignKey(on_delete=models.SET('USER_DELETED'), to=settings.AUTH_USER_MODEL, verbose_name='Current Owner'),
        ),
        migrations.AddField(
            model_name='nft',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='Web.nft'),
        ),
        migrations.CreateModel(
            name='UserWatchListedNFTCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('nftCollection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watchListedBy', to='Web.nftcollection', verbose_name='NFT Collection')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='Web.userwatchlistednftcollection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watchListed', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'db_table': 'WatchLists',
                'unique_together': {('user', 'nftCollection')},
            },
        ),
        migrations.CreateModel(
            name='UserFavoritedNFT',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('nft', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likedBy', to='Web.nft', verbose_name='NFT')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='Web.userfavoritednft')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'db_table': 'Favorites',
                'unique_together': {('user', 'nft')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='nft',
            unique_together={('UID', 'index')},
        ),
    ]
