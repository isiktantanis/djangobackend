# Generated by Django 4.0.3 on 2022-03-29 20:24

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='NFTCollections',
            fields=[
                ('name', models.CharField(max_length=128, primary_key=True, serialize=False, verbose_name='Name of the NFT collection.')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NFTs',
            fields=[
                ('uid', models.TextField(primary_key=True, serialize=False, verbose_name='Unique id of the NFT.')),
                ('nID', models.IntegerField(verbose_name='ID of a certain NFT.')),
                ('name', models.CharField(max_length=128, verbose_name="NFT's name given by the NFT's creator.")),
                ('description', models.TextField(null=True, verbose_name='Description of the NFT given by the creator.')),
                ('metaDataType', models.CharField(max_length=5, verbose_name='Type of the NFT.')),
                ('dataLink', models.TextField(verbose_name='Link of the content of NFT.')),
                ('marketStatus', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)], verbose_name='0: not on market, 1: on market but not on sale, 2: on market and on sale')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('collectionName', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collectionName', to='Web.nftcollections', verbose_name='Name of the collection where the NFT belongs.')),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('uAdress', models.TextField(primary_key=True, serialize=False, verbose_name='Address of the user coming from blockchain.')),
                ('username', models.CharField(max_length=32, unique=True, verbose_name='Unique name of the user set when signing up')),
                ('profilePicture', models.ImageField(null=True, upload_to='media/', verbose_name="User's profile picture")),
                ('mailAdress', models.TextField(unique=True, verbose_name='Mail address of the user set when signing up')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('favoritedNFTs', models.ManyToManyField(to='Web.nfts')),
                ('watchListedNFTCollections', models.ManyToManyField(to='Web.nftcollections')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='nfts',
            name='creatorName',
            field=models.ForeignKey(on_delete=models.SET('user_deleted'), related_name='creatorName', to='Web.users', to_field='username', verbose_name='Name of the creator of the NFT.'),
        ),
        migrations.AddField(
            model_name='nfts',
            name='currentOwner',
            field=models.ForeignKey(on_delete=models.SET('user_deleted'), to='Web.users', to_field='username', verbose_name='Name of the owner of the NFT.'),
        ),
        migrations.AlterUniqueTogether(
            name='nfts',
            unique_together={('uid', 'nID')},
        ),
    ]
